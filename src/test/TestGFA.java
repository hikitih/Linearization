package test;

import graph.Graph;
import graph.GraphSaveLoad;
import graph.Permutation;

public class TestGFA {
    static Graph g;
    static Permutation mySorting = new Permutation();

    public static void show(String filename, String sortname,String sortname2) {
        g = GraphSaveLoad.loadGFA(filename, "ref");
        if (g != null) {
            System.out.println(filename);
            System.out.println("Total vertices in graph: " + g.getCount());
            System.out.println("My sorting: ");
            //g.info();
            g.sorting();
            g.viewSorting(true, false);
            g.reloadVertices();
            //g.info();

            mySorting.setPermutation(g.getSorting());
            mySorting.setCutwidth(g.cutWidthNew(mySorting.getPermutation()));
            mySorting.viewPermutation(true);

            System.out.println("\n=====================================\n");


            /*
            System.out.println("\nNew sorting by Haussler: ");
            Permutation sorted = new Permutation(g.getCount());
            sorted.setPermutation(GraphSaveLoad.loadSorting(sortname));
            sorted.setCutwidth(g.cutWidthNew(sorted.getPermutation()));
            System.out.println("Vertices in graph: " + sorted.length());
            System.out.println("Reversed edges: " + g.getRightToLeft());
            System.out.println("Weight: " + g.getRightToLeftWeight());
            sorted.viewPermutation(true);
            System.out.println("\n=====================================\n");


            System.out.println("\nSorting by Haussler: ");
            sorted = new Permutation(g.getCount());
            sorted.setPermutation(GraphSaveLoad.loadSorting(sortname2));
            sorted.setCutwidth(g.cutWidthNew(sorted.getPermutation()));
            System.out.println("Vertices in graph: " + sorted.length());
            System.out.println("Reversed edges: " + g.getRightToLeft());
            System.out.println("Weight: " + g.getRightToLeftWeight());
            sorted.viewPermutation(true);
            System.out.println("\n=====================================\n");
            */

        }
    }

    public static void main(String[] args) {
        /*
        show("graph_20_29.gfa", "20_29_inds.txt");
        show("random_graph_20_63.gfa","20_63_inds.txt");
        show("random_graph_505_1110.gfa","505_1110_inds.txt");
        */
        //Graph with wrong paths
        //show("/new test data/with paths/biograph_8000_ME_36_LD_24_DU_9_InDel_180_SNP_900.gfa","/new test data/MSGA/msga_graph_sorted_slow.txt","/new test data/MSGA/sorted.vg.txt");

        //graph generated by Dmitrii Miiagkov
        /*
        show("/new test data/MSGA/result_graph_1.gfa","/new test data/MSGA/msga_graph_sorted_slow.txt","/new test data/MSGA/sorted.vg.txt");
        show("/new test data/MSGA/result_graph_2.gfa","/new test data/MSGA/msga_graph_sorted_slow.txt","/new test data/MSGA/sorted.vg.txt");
        show("/new test data/MSGA/result_graph_3.gfa","/new test data/MSGA/msga_graph_sorted_slow.txt","/new test data/MSGA/sorted.vg.txt");
        show("/new test data/MSGA/result_graph_4.gfa","/new test data/MSGA/msga_graph_sorted_slow.txt","/new test data/MSGA/sorted.vg.txt");
        show("/new test data/MSGA/result_graph_5.gfa","/new test data/MSGA/msga_graph_sorted_slow.txt","/new test data/MSGA/sorted.vg.txt");
        show("/new test data/MSGA/result_graph_6.gfa","/new test data/MSGA/msga_graph_sorted_slow.txt","/new test data/MSGA/sorted.vg.txt");
        show("/new test data/MSGA/result_graph_7.gfa","/new test data/MSGA/msga_graph_sorted_slow.txt","/new test data/MSGA/sorted.vg.txt");
        */
        show("/new test data/MSGA/result_graph_12.gfa","/new test data/MSGA/msga_graph_sorted_slow.txt","/new test data/MSGA/sorted.vg.txt");

        //big graphs
        /*
        show("/new test data/big graphs/biograph1_128000_ME_192_LD_128_DU_48_InDel_960_SNP_4800.gfa",
                "/new test data/big graphs/d_biograph1_128000_ME_192_LD_128_DU_48_InDel_960_SNP_4800.gfa.sort.txt",
                "/new test data/big graphs/biograph1_128000_ME_192_LD_128_DU_48_InDel_960_SNP_4800.gfa.sort.txt");
                */
    }

}
